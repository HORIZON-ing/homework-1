{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: False\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMClassification: 0.25.0+", "seed": 702594236, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='SwinTransformerV2',\n        arch='tiny',\n        img_size=256,\n        drop_path_rate=0.2,\n        pad_small_map=True),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=768,\n        init_cfg=None,\n        loss=dict(\n            type='LabelSmoothLoss', label_smooth_val=0.1, mode='original'),\n        cal_acc=False,\n        topk=(1, )),\n    init_cfg=[\n        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),\n        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)\n    ],\n    train_cfg=dict(augments=[\n        dict(type='BatchMixup', alpha=0.8, num_classes=5, prob=0.5),\n        dict(type='BatchCutMix', alpha=1.0, num_classes=5, prob=0.5)\n    ]))\ndataset_type = 'ImageNet'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1)),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='ImageNet',\n        data_prefix='data/flower_dataset/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ],\n        ann_file='data/flower_dataset/train.txt',\n        classes='data/flower_dataset/classes.txt'),\n    val=dict(\n        type='ImageNet',\n        data_prefix='data/flower_dataset/val',\n        ann_file='data/flower_dataset/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1)),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        classes='data/flower_dataset/classes.txt'),\n    test=dict(\n        type='ImageNet',\n        data_prefix='data/imagenet/val',\n        ann_file='data/imagenet/meta/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1)),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=1, metric='accuracy')\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/gjq/mmclassification/checkpoints/swinv2-tiny-w16_3rdparty_in1k-256px_20220803-9651cdd7.pth'\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[1])\nrunner = dict(type='EpochBasedRunner', max_epochs=100)\nwork_dir = 'work_dirs/flower_swimv2_tiny'\ngpu_ids = [0]\ndevice = 'cpu'\nseed = 702594236\n", "CLASSES": ["tulip", "dandelion", "sunflower", "daisy", "rose"]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.001, "data_time": 0.02213, "loss": 1.48113, "time": 1.34853}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.001, "data_time": 0.00165, "loss": 1.23498, "time": 1.421}
{"mode": "val", "epoch": 1, "iter": 72, "lr": 0.001, "accuracy_top-1": 83.39161, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "data_time": 0.02182, "loss": 1.09511, "time": 1.44753}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0001, "data_time": 0.00163, "loss": 1.05314, "time": 1.41989}
{"mode": "val", "epoch": 2, "iter": 72, "lr": 0.0001, "accuracy_top-1": 92.13287, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0001, "data_time": 0.02193, "loss": 1.01622, "time": 1.43466}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0001, "data_time": 0.0016, "loss": 1.0098, "time": 1.42151}
{"mode": "val", "epoch": 3, "iter": 72, "lr": 0.0001, "accuracy_top-1": 93.35664, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0001, "data_time": 0.0219, "loss": 1.01996, "time": 1.43597}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0001, "data_time": 0.00163, "loss": 1.0146, "time": 1.42473}
{"mode": "val", "epoch": 4, "iter": 72, "lr": 0.0001, "accuracy_top-1": 94.05595, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.0001, "data_time": 0.02187, "loss": 1.00816, "time": 1.43539}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0001, "data_time": 0.00164, "loss": 0.98124, "time": 1.42828}
{"mode": "val", "epoch": 5, "iter": 72, "lr": 0.0001, "accuracy_top-1": 94.75525, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.0001, "data_time": 0.02187, "loss": 0.98551, "time": 1.43843}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.0001, "data_time": 0.00164, "loss": 1.0041, "time": 1.42725}
{"mode": "val", "epoch": 6, "iter": 72, "lr": 0.0001, "accuracy_top-1": 93.70629, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.0001, "data_time": 0.02186, "loss": 0.98317, "time": 1.44475}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.0001, "data_time": 0.00164, "loss": 0.9602, "time": 1.43046}
{"mode": "val", "epoch": 7, "iter": 72, "lr": 0.0001, "accuracy_top-1": 94.93007, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.0001, "data_time": 0.02182, "loss": 0.94493, "time": 1.44402}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.0001, "data_time": 0.00165, "loss": 0.97446, "time": 1.42305}
{"mode": "val", "epoch": 8, "iter": 72, "lr": 0.0001, "accuracy_top-1": 95.62937, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.0001, "data_time": 0.02188, "loss": 0.95375, "time": 1.43932}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.0001, "data_time": 0.00166, "loss": 0.97571, "time": 1.43174}
{"mode": "val", "epoch": 9, "iter": 72, "lr": 0.0001, "accuracy_top-1": 94.75525, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.0001, "data_time": 0.02189, "loss": 0.95136, "time": 1.43282}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.0001, "data_time": 0.00166, "loss": 0.98192, "time": 1.42666}
{"mode": "val", "epoch": 10, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.15385, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.0001, "data_time": 0.02191, "loss": 0.95344, "time": 1.44344}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.0001, "data_time": 0.00167, "loss": 0.95228, "time": 1.42846}
{"mode": "val", "epoch": 11, "iter": 72, "lr": 0.0001, "accuracy_top-1": 94.93007, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0001, "data_time": 0.02191, "loss": 0.91602, "time": 1.43787}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0001, "data_time": 0.00165, "loss": 0.97083, "time": 1.42391}
{"mode": "val", "epoch": 12, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.0001, "data_time": 0.02188, "loss": 0.94094, "time": 1.43807}
{"mode": "train", "epoch": 13, "iter": 200, "lr": 0.0001, "data_time": 0.00165, "loss": 0.93498, "time": 1.42875}
{"mode": "val", "epoch": 13, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.0001, "data_time": 0.02198, "loss": 0.94976, "time": 1.43921}
{"mode": "train", "epoch": 14, "iter": 200, "lr": 0.0001, "data_time": 0.00164, "loss": 0.94036, "time": 1.42369}
{"mode": "val", "epoch": 14, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.32867, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.0001, "data_time": 0.02188, "loss": 0.94287, "time": 1.44002}
{"mode": "train", "epoch": 15, "iter": 200, "lr": 0.0001, "data_time": 0.00164, "loss": 0.93753, "time": 1.42341}
{"mode": "val", "epoch": 15, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 0.0001, "data_time": 0.0219, "loss": 0.92518, "time": 1.4404}
{"mode": "train", "epoch": 16, "iter": 200, "lr": 0.0001, "data_time": 0.00165, "loss": 0.93153, "time": 1.4277}
{"mode": "val", "epoch": 16, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 17, "iter": 100, "lr": 0.0001, "data_time": 0.02188, "loss": 0.92286, "time": 1.43745}
{"mode": "train", "epoch": 17, "iter": 200, "lr": 0.0001, "data_time": 0.00164, "loss": 0.9502, "time": 1.42866}
{"mode": "val", "epoch": 17, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 0.0001, "data_time": 0.02185, "loss": 0.93644, "time": 1.44047}
{"mode": "train", "epoch": 18, "iter": 200, "lr": 0.0001, "data_time": 0.00164, "loss": 0.95022, "time": 1.42336}
{"mode": "val", "epoch": 18, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.15385, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 0.0001, "data_time": 0.02186, "loss": 0.93235, "time": 1.44093}
{"mode": "train", "epoch": 19, "iter": 200, "lr": 0.0001, "data_time": 0.00161, "loss": 0.91745, "time": 1.42281}
{"mode": "val", "epoch": 19, "iter": 72, "lr": 0.0001, "accuracy_top-1": 95.27972, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 0.0001, "data_time": 0.0219, "loss": 0.90099, "time": 1.43783}
{"mode": "train", "epoch": 20, "iter": 200, "lr": 0.0001, "data_time": 0.00163, "loss": 0.92172, "time": 1.42264}
{"mode": "val", "epoch": 20, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.85315, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 21, "iter": 100, "lr": 0.0001, "data_time": 0.02187, "loss": 0.90047, "time": 1.43903}
{"mode": "train", "epoch": 21, "iter": 200, "lr": 0.0001, "data_time": 0.00165, "loss": 0.92451, "time": 1.4237}
{"mode": "val", "epoch": 21, "iter": 72, "lr": 0.0001, "accuracy_top-1": 94.58042, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 0.0001, "data_time": 0.02188, "loss": 0.9321, "time": 1.43636}
{"mode": "train", "epoch": 22, "iter": 200, "lr": 0.0001, "data_time": 0.00165, "loss": 0.90209, "time": 1.42325}
{"mode": "val", "epoch": 22, "iter": 72, "lr": 0.0001, "accuracy_top-1": 95.8042, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 0.0001, "data_time": 0.02188, "loss": 0.9288, "time": 1.444}
{"mode": "train", "epoch": 23, "iter": 200, "lr": 0.0001, "data_time": 0.00167, "loss": 0.93145, "time": 1.4242}
{"mode": "val", "epoch": 23, "iter": 72, "lr": 0.0001, "accuracy_top-1": 95.62937, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 0.0001, "data_time": 0.02193, "loss": 0.91021, "time": 1.4363}
{"mode": "train", "epoch": 24, "iter": 200, "lr": 0.0001, "data_time": 0.00163, "loss": 0.91196, "time": 1.4203}
{"mode": "val", "epoch": 24, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.32867, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 0.0001, "data_time": 0.0219, "loss": 0.9224, "time": 1.43245}
{"mode": "train", "epoch": 25, "iter": 200, "lr": 0.0001, "data_time": 0.00165, "loss": 0.88482, "time": 1.42091}
{"mode": "val", "epoch": 25, "iter": 72, "lr": 0.0001, "accuracy_top-1": 97.2028, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 0.0001, "data_time": 0.02196, "loss": 0.89486, "time": 1.43343}
{"mode": "train", "epoch": 26, "iter": 200, "lr": 0.0001, "data_time": 0.00166, "loss": 0.92913, "time": 1.42428}
{"mode": "val", "epoch": 26, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.67832, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 0.0001, "data_time": 0.0219, "loss": 0.87599, "time": 1.43818}
{"mode": "train", "epoch": 27, "iter": 200, "lr": 0.0001, "data_time": 0.00168, "loss": 0.88528, "time": 1.42385}
{"mode": "val", "epoch": 27, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 0.0001, "data_time": 0.0219, "loss": 0.9247, "time": 1.44007}
{"mode": "train", "epoch": 28, "iter": 200, "lr": 0.0001, "data_time": 0.00167, "loss": 0.90753, "time": 1.42364}
{"mode": "val", "epoch": 28, "iter": 72, "lr": 0.0001, "accuracy_top-1": 97.02797, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 0.0001, "data_time": 0.02183, "loss": 0.89221, "time": 1.43238}
{"mode": "train", "epoch": 29, "iter": 200, "lr": 0.0001, "data_time": 0.00166, "loss": 0.91743, "time": 1.42267}
{"mode": "val", "epoch": 29, "iter": 72, "lr": 0.0001, "accuracy_top-1": 97.2028, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 0.0001, "data_time": 0.02184, "loss": 0.92454, "time": 1.43536}
{"mode": "train", "epoch": 30, "iter": 200, "lr": 0.0001, "data_time": 0.00164, "loss": 0.89629, "time": 1.42456}
{"mode": "val", "epoch": 30, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.85315, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 31, "iter": 100, "lr": 0.0001, "data_time": 0.02193, "loss": 0.91947, "time": 1.43819}
{"mode": "train", "epoch": 31, "iter": 200, "lr": 0.0001, "data_time": 0.00165, "loss": 0.88819, "time": 1.42487}
{"mode": "val", "epoch": 31, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.67832, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 32, "iter": 100, "lr": 0.0001, "data_time": 0.02197, "loss": 0.89006, "time": 1.43037}
{"mode": "train", "epoch": 32, "iter": 200, "lr": 0.0001, "data_time": 0.00164, "loss": 0.88424, "time": 1.42109}
{"mode": "val", "epoch": 32, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.67832, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 33, "iter": 100, "lr": 0.0001, "data_time": 0.02188, "loss": 0.89733, "time": 1.43345}
{"mode": "train", "epoch": 33, "iter": 200, "lr": 0.0001, "data_time": 0.00165, "loss": 0.87254, "time": 1.41937}
{"mode": "val", "epoch": 33, "iter": 72, "lr": 0.0001, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 34, "iter": 100, "lr": 0.0001, "data_time": 0.02187, "loss": 0.89545, "time": 1.43462}
{"mode": "train", "epoch": 34, "iter": 200, "lr": 0.0001, "data_time": 0.00167, "loss": 0.90596, "time": 1.41471}
{"mode": "val", "epoch": 34, "iter": 72, "lr": 0.0001, "accuracy_top-1": 97.37762, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 35, "iter": 100, "lr": 0.0001, "data_time": 0.02185, "loss": 0.89986, "time": 1.43274}
